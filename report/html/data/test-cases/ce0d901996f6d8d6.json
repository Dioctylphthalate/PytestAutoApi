{"uid":"ce0d901996f6d8d6","name":"test_OwnerGuidFee_all[查询客户欠费1]","fullName":"test_case.Ownerfee.test_OwnerGuidFee_all.TestOwnerguidfeeAll#test_OwnerGuidFee_all","historyId":"4278ef0872c7f10c723d9b0ec46ede64","time":{"start":1697512049153,"stop":1697512049878,"duration":725},"description":"\n        :param :\n        :return:\n        ","descriptionHtml":"<pre><code>    :param :\n    :return:\n</code></pre>\n","status":"broken","statusMessage":"utils.other_tools.exceptions.JsonpathExtractionFailed: JsonPath值获取失败 $.errorCode","statusTrace":"self = <test_OwnerGuidFee_all.TestOwnerguidfeeAll object at 0x00000260055CB910>\nin_data = {'assert_data': {'errorCode': {'AssertType': None, 'jsonpath': '$.errorCode', 'type': '==', 'value': 200}, 'errorMsg':...e{yushaoqi_sql}', 'link': '4dd311b1-6c9a-11ee-88ec-00163e1c1703', 'name': '$cache{msg}'}, 'dependence_case': True, ...}\ncase_skip = None\n\n    @allure.story(\"收藏网址接口\")\n    @pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\n    def test_OwnerGuidFee_all(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n        res = RequestControl(in_data).http_request()\n        TearDownHandler(res).teardown_handle()\n>       Assert(in_data['assert_data']).assert_equality(response_data=res.response_data,\n                                                       sql_data=res.sql_data, status_code=res.status_code)\n\ntest_case\\Ownerfee\\test_OwnerGuidFee_all.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.assertion.assert_control.Assert object at 0x00000260055CBFA0>\nresponse_data = '{\"success\":false,\"message\":\"管理小区不能为空\",\"detail\":null,\"code\":400,\"result\":\"\",\"timestamp\":1697512048443}'\nsql_data = {'name': '4e2177d7-6c9a-11ee-88ec-00163e1c1703'}, status_code = 200\n\n    def assert_equality(\n            self,\n            response_data: Text,\n            sql_data: Dict,\n            status_code: int) -> None:\n        \"\"\"  assert 断言处理 \"\"\"\n        # 判断数据类型\n        if self._check_params(response_data, sql_data) is not False:\n            for key, values in self.assert_data.items():\n                if key == \"status_code\":\n                    assert status_code == values\n                else:\n                    assert_value = self.assert_data[key]['value']  # 获取 yaml 文件中的期望value值\n                    assert_jsonpath = self.assert_data[key]['jsonpath']  # 获取到 yaml断言中的jsonpath的数据\n                    assert_types = self.assert_data[key]['AssertType']\n                    # 从yaml获取jsonpath，拿到对象的接口响应数据\n                    resp_data = jsonpath(json.loads(response_data), assert_jsonpath)\n                    message = self._message(value=values)\n                    # jsonpath 如果数据获取失败，会返回False，判断获取成功才会执行如下代码\n                    if resp_data is not False:\n                        # 判断断言类型\n                        self.assert_type_handle(\n                            assert_types=assert_types,\n                            sql_data=sql_data,\n                            assert_value=assert_value,\n                            key=key,\n                            values=values,\n                            resp_data=resp_data,\n                            message=message\n                        )\n                    else:\n                        ERROR.logger.error(\"JsonPath值获取失败 %s \", assert_jsonpath)\n>                       raise JsonpathExtractionFailed(f\"JsonPath值获取失败 {assert_jsonpath}\")\nE                       utils.other_tools.exceptions.JsonpathExtractionFailed: JsonPath值获取失败 $.errorCode\n\nutils\\assertion\\assert_control.py:165: JsonpathExtractionFailed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1697512047468,"stop":1697512047514,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"clear_report","time":{"start":1697512047514,"stop":1697512047520,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"work_login_init","time":{"start":1697512047520,"stop":1697512047868,"duration":348},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"case_skip","time":{"start":1697512049152,"stop":1697512049152,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"description":"\n        :param :\n        :return:\n        ","status":"broken","statusMessage":"utils.other_tools.exceptions.JsonpathExtractionFailed: JsonPath值获取失败 $.errorCode","statusTrace":"self = <test_OwnerGuidFee_all.TestOwnerguidfeeAll object at 0x00000260055CB910>\nin_data = {'assert_data': {'errorCode': {'AssertType': None, 'jsonpath': '$.errorCode', 'type': '==', 'value': 200}, 'errorMsg':...e{yushaoqi_sql}', 'link': '4dd311b1-6c9a-11ee-88ec-00163e1c1703', 'name': '$cache{msg}'}, 'dependence_case': True, ...}\ncase_skip = None\n\n    @allure.story(\"收藏网址接口\")\n    @pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\n    def test_OwnerGuidFee_all(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n        res = RequestControl(in_data).http_request()\n        TearDownHandler(res).teardown_handle()\n>       Assert(in_data['assert_data']).assert_equality(response_data=res.response_data,\n                                                       sql_data=res.sql_data, status_code=res.status_code)\n\ntest_case\\Ownerfee\\test_OwnerGuidFee_all.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.assertion.assert_control.Assert object at 0x00000260055CBFA0>\nresponse_data = '{\"success\":false,\"message\":\"管理小区不能为空\",\"detail\":null,\"code\":400,\"result\":\"\",\"timestamp\":1697512048443}'\nsql_data = {'name': '4e2177d7-6c9a-11ee-88ec-00163e1c1703'}, status_code = 200\n\n    def assert_equality(\n            self,\n            response_data: Text,\n            sql_data: Dict,\n            status_code: int) -> None:\n        \"\"\"  assert 断言处理 \"\"\"\n        # 判断数据类型\n        if self._check_params(response_data, sql_data) is not False:\n            for key, values in self.assert_data.items():\n                if key == \"status_code\":\n                    assert status_code == values\n                else:\n                    assert_value = self.assert_data[key]['value']  # 获取 yaml 文件中的期望value值\n                    assert_jsonpath = self.assert_data[key]['jsonpath']  # 获取到 yaml断言中的jsonpath的数据\n                    assert_types = self.assert_data[key]['AssertType']\n                    # 从yaml获取jsonpath，拿到对象的接口响应数据\n                    resp_data = jsonpath(json.loads(response_data), assert_jsonpath)\n                    message = self._message(value=values)\n                    # jsonpath 如果数据获取失败，会返回False，判断获取成功才会执行如下代码\n                    if resp_data is not False:\n                        # 判断断言类型\n                        self.assert_type_handle(\n                            assert_types=assert_types,\n                            sql_data=sql_data,\n                            assert_value=assert_value,\n                            key=key,\n                            values=values,\n                            resp_data=resp_data,\n                            message=message\n                        )\n                    else:\n                        ERROR.logger.error(\"JsonPath值获取失败 %s \", assert_jsonpath)\n>                       raise JsonpathExtractionFailed(f\"JsonPath值获取失败 {assert_jsonpath}\")\nE                       utils.other_tools.exceptions.JsonpathExtractionFailed: JsonPath值获取失败 $.errorCode\n\nutils\\assertion\\assert_control.py:165: JsonpathExtractionFailed","steps":[{"name":"请求URL: https://ceshi.es-iot.cn/api/charge/esChargeOmnibusFee/allOwnerGuidFee","time":{"start":1697512049876,"stop":1697512049876,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"请求方式: POST","time":{"start":1697512049876,"stop":1697512049876,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"请求头: ","time":{"start":1697512049876,"stop":1697512049877,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"fff4ecdb32c9e06d","name":"请求头: ","source":"fff4ecdb32c9e06d.json","type":"application/json","size":363}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"请求数据: ","time":{"start":1697512049877,"stop":1697512049877,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"a2847d5f0a22e288","name":"请求数据: ","source":"a2847d5f0a22e288.json","type":"application/json","size":88}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"预期数据: ","time":{"start":1697512049877,"stop":1697512049877,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"a91b5beaf7126ce5","name":"预期数据: ","source":"a91b5beaf7126ce5.json","type":"application/json","size":214}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"响应耗时(ms): 293","time":{"start":1697512049877,"stop":1697512049877,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"响应结果: ","time":{"start":1697512049877,"stop":1697512049878,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"8654ae2cd5a5e6e8","name":"响应结果: ","source":"8654ae2cd5a5e6e8.json","type":"application/json","size":135}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1}],"attachments":[{"uid":"5643b65dcf4b37dc","name":"log","source":"5643b65dcf4b37dc.txt","type":"text/plain","size":1084}],"parameters":[],"stepsCount":7,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":5},"afterStages":[],"labels":[{"name":"epic","value":"开发平台接口"},{"name":"feature","value":"收藏模块"},{"name":"story","value":"收藏网址接口"},{"name":"parentSuite","value":"test_case.Ownerfee"},{"name":"suite","value":"test_OwnerGuidFee_all"},{"name":"subSuite","value":"TestOwnerguidfeeAll"},{"name":"host","value":"DESKTOP-BJ4FQ1J"},{"name":"thread","value":"20060-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.Ownerfee.test_OwnerGuidFee_all"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"in_data","value":"{'url': 'https://ceshi.es-iot.cn/api/charge/esChargeOmnibusFee/allOwnerGuidFee', 'method': 'POST', 'detail': '查询客户欠费', 'assert_data': {'status_code': 200, 'errorCode': {'jsonpath': '$.errorCode', 'type': '==', 'value': 200, 'AssertType': None}, 'errorMsg': {'jsonpath': '$.errorMsg', 'type': '==', 'value': '请先登录！', 'AssertType': None}}, 'headers': {'Authorization': '$cache{Authorization}', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36 Edg/115.0.1901.203\\\\', 'Content-Type': 'application/json'}, 'requestType': 'JSON', 'is_run': None, 'data': {'kk': '$cache{yushaoqi_sql}', 'name': '$cache{msg}', 'link': 123}, 'dependence_case': True, 'dependence_case_data': [{'case_id': 'self', 'dependent_data': [{'dependent_type': 'sqlData', 'jsonpath': '$.name', 'set_cache': None, 'replace_key': '$.data.link'}]}], 'sql': ['SELECT UUID()  as name'], 'setup_sql': ['SELECT UUID()  as name'], 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': None, 'sleep': None}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"ce0d901996f6d8d6.json","parameterValues":["{'url': 'https://ceshi.es-iot.cn/api/charge/esChargeOmnibusFee/allOwnerGuidFee', 'method': 'POST', 'detail': '查询客户欠费', 'assert_data': {'status_code': 200, 'errorCode': {'jsonpath': '$.errorCode', 'type': '==', 'value': 200, 'AssertType': None}, 'errorMsg': {'jsonpath': '$.errorMsg', 'type': '==', 'value': '请先登录！', 'AssertType': None}}, 'headers': {'Authorization': '$cache{Authorization}', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36 Edg/115.0.1901.203\\\\', 'Content-Type': 'application/json'}, 'requestType': 'JSON', 'is_run': None, 'data': {'kk': '$cache{yushaoqi_sql}', 'name': '$cache{msg}', 'link': 123}, 'dependence_case': True, 'dependence_case_data': [{'case_id': 'self', 'dependent_data': [{'dependent_type': 'sqlData', 'jsonpath': '$.name', 'set_cache': None, 'replace_key': '$.data.link'}]}], 'sql': ['SELECT UUID()  as name'], 'setup_sql': ['SELECT UUID()  as name'], 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': None, 'sleep': None}"]}