{"uid":"98028385ab69527a","name":"test_AddCharge[收费系统新增付款方式]","fullName":"test_case.Charge.test_AddCharge.TestAddcharge#test_AddCharge","historyId":"eac93b3a9a30410e52b6d4060ac1af7e","time":{"start":1709861867187,"stop":1709861867316,"duration":129},"description":"\n        :param :\n        :return:\n        ","descriptionHtml":"<pre><code>    :param :\n    :return:\n</code></pre>\n","status":"broken","statusMessage":"utils.other_tools.exceptions.JsonpathExtractionFailed: JsonPath值获取失败 $.result.projectId","statusTrace":"self = <test_AddCharge.TestAddcharge object at 0x0000018AAAD5ABB0>\nin_data = {'assert_data': {'proj': {'AssertType': None, 'jsonpath': '$.result.projectId', 'type': '==', 'value': '$cache{project...as': '', 'fldAttribute': 2, 'fldCode': 'SFFKFS014', 'fldCreateDate': '2024-03-05', ...}, 'dependence_case': False, ...}\ncase_skip = None\n\n    @allure.story(\"收费接口\")\n    @pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\n    def test_AddCharge(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n        res = RequestControl(in_data).http_request()\n        TearDownHandler(res).teardown_handle()\n>       Assert(in_data['assert_data']).assert_equality(response_data=res.response_data,\n                                                       sql_data=res.sql_data, status_code=res.status_code)\n\ntest_case\\Charge\\test_AddCharge.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.assertion.assert_control.Assert object at 0x0000018AAAE85340>\nresponse_data = '{\"success\":true,\"message\":\"操作成功\",\"detail\":\"\",\"code\":200,\"result\":null,\"timestamp\":1709861862261}'\nsql_data = {'sql': None}, status_code = 200\n\n    def assert_equality(\n            self,\n            response_data: Text,\n            sql_data: Dict,\n            status_code: int) -> None:\n        \"\"\"  assert 断言处理 \"\"\"\n        # 判断数据类型\n        if self._check_params(response_data, sql_data) is not False:\n            for key, values in self.assert_data.items():\n                if key == \"status_code\":\n                    assert status_code == values\n                else:\n                    assert_value = self.assert_data[key]['value']  # 获取 yaml 文件中的期望value值\n                    assert_jsonpath = self.assert_data[key]['jsonpath']  # 获取到 yaml断言中的jsonpath的数据\n                    assert_types = self.assert_data[key]['AssertType']\n                    # 从yaml获取jsonpath，拿到对象的接口响应数据\n                    resp_data = jsonpath(json.loads(response_data), assert_jsonpath)\n                    message = self._message(value=values)\n                    # jsonpath 如果数据获取失败，会返回False，判断获取成功才会执行如下代码\n                    if resp_data is not False:\n                        # 判断断言类型\n                        self.assert_type_handle(\n                            assert_types=assert_types,\n                            sql_data=sql_data,\n                            assert_value=assert_value,\n                            key=key,\n                            values=values,\n                            resp_data=resp_data,\n                            message=message\n                        )\n                    else:\n                        ERROR.logger.error(\"JsonPath值获取失败 %s \", assert_jsonpath)\n>                       raise JsonpathExtractionFailed(f\"JsonPath值获取失败 {assert_jsonpath}\")\nE                       utils.other_tools.exceptions.JsonpathExtractionFailed: JsonPath值获取失败 $.result.projectId\n\nutils\\assertion\\assert_control.py:165: JsonpathExtractionFailed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1709861863408,"stop":1709861863447,"duration":39},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"clear_report","time":{"start":1709861863447,"stop":1709861863487,"duration":40},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"pre_cache","time":{"start":1709861863487,"stop":1709861863489,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"case_skip","time":{"start":1709861867187,"stop":1709861867187,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"testStage":{"description":"\n        :param :\n        :return:\n        ","status":"broken","statusMessage":"utils.other_tools.exceptions.JsonpathExtractionFailed: JsonPath值获取失败 $.result.projectId","statusTrace":"self = <test_AddCharge.TestAddcharge object at 0x0000018AAAD5ABB0>\nin_data = {'assert_data': {'proj': {'AssertType': None, 'jsonpath': '$.result.projectId', 'type': '==', 'value': '$cache{project...as': '', 'fldAttribute': 2, 'fldCode': 'SFFKFS014', 'fldCreateDate': '2024-03-05', ...}, 'dependence_case': False, ...}\ncase_skip = None\n\n    @allure.story(\"收费接口\")\n    @pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\n    def test_AddCharge(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n        res = RequestControl(in_data).http_request()\n        TearDownHandler(res).teardown_handle()\n>       Assert(in_data['assert_data']).assert_equality(response_data=res.response_data,\n                                                       sql_data=res.sql_data, status_code=res.status_code)\n\ntest_case\\Charge\\test_AddCharge.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.assertion.assert_control.Assert object at 0x0000018AAAE85340>\nresponse_data = '{\"success\":true,\"message\":\"操作成功\",\"detail\":\"\",\"code\":200,\"result\":null,\"timestamp\":1709861862261}'\nsql_data = {'sql': None}, status_code = 200\n\n    def assert_equality(\n            self,\n            response_data: Text,\n            sql_data: Dict,\n            status_code: int) -> None:\n        \"\"\"  assert 断言处理 \"\"\"\n        # 判断数据类型\n        if self._check_params(response_data, sql_data) is not False:\n            for key, values in self.assert_data.items():\n                if key == \"status_code\":\n                    assert status_code == values\n                else:\n                    assert_value = self.assert_data[key]['value']  # 获取 yaml 文件中的期望value值\n                    assert_jsonpath = self.assert_data[key]['jsonpath']  # 获取到 yaml断言中的jsonpath的数据\n                    assert_types = self.assert_data[key]['AssertType']\n                    # 从yaml获取jsonpath，拿到对象的接口响应数据\n                    resp_data = jsonpath(json.loads(response_data), assert_jsonpath)\n                    message = self._message(value=values)\n                    # jsonpath 如果数据获取失败，会返回False，判断获取成功才会执行如下代码\n                    if resp_data is not False:\n                        # 判断断言类型\n                        self.assert_type_handle(\n                            assert_types=assert_types,\n                            sql_data=sql_data,\n                            assert_value=assert_value,\n                            key=key,\n                            values=values,\n                            resp_data=resp_data,\n                            message=message\n                        )\n                    else:\n                        ERROR.logger.error(\"JsonPath值获取失败 %s \", assert_jsonpath)\n>                       raise JsonpathExtractionFailed(f\"JsonPath值获取失败 {assert_jsonpath}\")\nE                       utils.other_tools.exceptions.JsonpathExtractionFailed: JsonPath值获取失败 $.result.projectId\n\nutils\\assertion\\assert_control.py:165: JsonpathExtractionFailed","steps":[{"name":"请求URL: http://saas1.es-iot.cn/api/charge/pay_mode/save","time":{"start":1709861867314,"stop":1709861867314,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"请求方式: POST","time":{"start":1709861867314,"stop":1709861867314,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"请求头: ","time":{"start":1709861867314,"stop":1709861867315,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"62a204566585d064","name":"请求头: ","source":"62a204566585d064.json","type":"application/json","size":364}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true,"stepsCount":0},{"name":"请求数据: ","time":{"start":1709861867315,"stop":1709861867315,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"3c34b961108300e5","name":"请求数据: ","source":"3c34b961108300e5.json","type":"application/json","size":574}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true,"stepsCount":0},{"name":"预期数据: ","time":{"start":1709861867315,"stop":1709861867315,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"c609768f64aad9bd","name":"预期数据: ","source":"c609768f64aad9bd.json","type":"application/json","size":209}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true,"stepsCount":0},{"name":"响应耗时(ms): 124","time":{"start":1709861867315,"stop":1709861867315,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"响应结果: ","time":{"start":1709861867315,"stop":1709861867315,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"3d75d4dbbfabb314","name":"响应结果: ","source":"3d75d4dbbfabb314.json","type":"application/json","size":122}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":false,"hasContent":true,"stepsCount":0}],"attachments":[{"uid":"861f9e24f21cc901","name":"log","source":"861f9e24f21cc901.txt","type":"text/plain","size":1555}],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":7},"afterStages":[],"labels":[{"name":"story","value":"收费接口"},{"name":"feature","value":"收费模块"},{"name":"epic","value":"测试平台接口"},{"name":"parentSuite","value":"test_case.Charge"},{"name":"suite","value":"test_AddCharge"},{"name":"subSuite","value":"TestAddcharge"},{"name":"host","value":"DESKTOP-BJ4FQ1J"},{"name":"thread","value":"19736-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.Charge.test_AddCharge"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"in_data","value":"{'url': 'http://saas1.es-iot.cn/api/charge/pay_mode/save', 'method': 'POST', 'detail': '收费系统新增付款方式', 'assert_data': {'success': {'jsonpath': '$.message', 'type': '==', 'value': '操作成功', 'AssertType': None}, 'proj': {'jsonpath': '$.result.projectId', 'type': '==', 'value': '$cache{projectguid}', 'AssertType': None}}, 'headers': {'Authorization': '$cache{Authorization}', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36 Edg/115.0.1901.203\\\\', 'Content-Type': 'application/json'}, 'requestType': 'JSON', 'is_run': None, 'data': {'fldGuid': 'af597696-2e61-11ec-a455-a4bb6d58a26d', 'fldCreateUser': 'autouser', 'fldCreateDate': '2024-03-05', 'fldModifyUser': 'autouser', 'fldModifyDate': '2024-03-05', 'fldTenancy': '', 'fldCode': 'SFFKFS014', 'fldName': '$cache{payname}', 'fldAttribute': 2, 'fldPaymentRefund': 0, 'fldStatus': 1, 'fldPrePay': 0, 'fldPaymentCollection': 1, 'fldOrder': 14, 'fldAlias': '', 'fldUseObjectHouse': 1, 'fldUseObjectCar': 1, 'fldUseObjectArea': 1, 'fldInterest': 0, 'fldResource': '', 'fldDownTime': '1900-01-01', 'fldDisplayOrNot': 1, 'treeDataGuids': [], 'treeUserGuids': []}, 'dependence_case': False, 'dependence_case_data': None, 'sql': None, 'setup_sql': None, 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': None, 'sleep': None}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"98028385ab69527a.json","parameterValues":["{'url': 'http://saas1.es-iot.cn/api/charge/pay_mode/save', 'method': 'POST', 'detail': '收费系统新增付款方式', 'assert_data': {'success': {'jsonpath': '$.message', 'type': '==', 'value': '操作成功', 'AssertType': None}, 'proj': {'jsonpath': '$.result.projectId', 'type': '==', 'value': '$cache{projectguid}', 'AssertType': None}}, 'headers': {'Authorization': '$cache{Authorization}', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36 Edg/115.0.1901.203\\\\', 'Content-Type': 'application/json'}, 'requestType': 'JSON', 'is_run': None, 'data': {'fldGuid': 'af597696-2e61-11ec-a455-a4bb6d58a26d', 'fldCreateUser': 'autouser', 'fldCreateDate': '2024-03-05', 'fldModifyUser': 'autouser', 'fldModifyDate': '2024-03-05', 'fldTenancy': '', 'fldCode': 'SFFKFS014', 'fldName': '$cache{payname}', 'fldAttribute': 2, 'fldPaymentRefund': 0, 'fldStatus': 1, 'fldPrePay': 0, 'fldPaymentCollection': 1, 'fldOrder': 14, 'fldAlias': '', 'fldUseObjectHouse': 1, 'fldUseObjectCar': 1, 'fldUseObjectArea': 1, 'fldInterest': 0, 'fldResource': '', 'fldDownTime': '1900-01-01', 'fldDisplayOrNot': 1, 'treeDataGuids': [], 'treeUserGuids': []}, 'dependence_case': False, 'dependence_case_data': None, 'sql': None, 'setup_sql': None, 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': None, 'sleep': None}"]}